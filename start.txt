$ cd /d/hello-git
$ cd..
$ mkdir test
$ cd test
$ touch start.txt
$ git init
$ git add .
$ git commit -m "first commit"
$ git log
$ git reset --hard HEAD^ : 고맙고 무서운 명령어


출처 : https://mungto.tistory.com/187


https://git-scm.com
여기에 들어가면 git-bash를 설치 할 수 있다.

1.Git 초기설정하기
  - 이메일 등록하기 : git config --global user.email "이메일주소"
  - 등록한 이메일 주소보기 : git config --global user.email
  - 이름 등록하기 : git config --global user.name "이름"
  - 등록한 이름 주소보기 : git config --global user.name
  - 이후 리포지토리에 있는 내용대로 실행하여 연동

2. Github 연동하기
  - 처음 github에서 repository를 만들게 되면 나오는 화면이다.
  - 만약 local git이 설정 되어있다면 아래와 같이 연동하면 된다.
처음이라면 위의 경우와 같이 연동한다.

2.1 git 생성하기
  - git init
    . local git을 생성한다, 최초 1회만 작성하면 된다.
2.2 git에 추가할 파일 알려주기
  - git add <파일명>
    . 파일을 로컬 리포지토리에 추가한다.
    . 만약 파일이 없다면 touch <파일명> 명령어를 작성하면 파일이 생성된다.
    . 모든파일을 추가하고 싶다면 add .을 이용하면 모든 수정파일이 추가된다.
2.3 git에 변경사항 저장하기
  - git commit -m "코멘트"
    . git 에 저장할껀데, 저장할때 다는 코멘트를 남긴다.
2.4 github의 어느 저장소에 올릴지 연동한다.
  - git remote add <주소이름> <주소>
    . 주소를 연동하면 앞으로 push를 할때 자동으로 기록된 주소로 변경사항이 저장된다.
    . 연동된 주소가 보고싶다면 git remote -v를 이용한다.
2.5 github에 저장내용 올리기
  - git push origin master
    . github에 변경된 commit내용을 올린다.
    . 처음 push를 하면 아이디와 비밀번호를 입력하라고 나온다. github 아이디와 비밀번호를 입력하면 된다.
2.6 git에 넣지않을 파일 설정하기
    . gitignore라는 파일을 이용하여 git에 추가하지 않을 파일을 설정할 수 있다.
     git이 설정된 폴더 최상위에 넣어주면 된다.

3. github에서 데이터 받아오기
3.1 데이터 갱신하기
  내가 회사와 집에서 작업을 한다면 현재 local git과 github의 commit 버전이 다를 수가 있다.
  내가 회사에서 커밋, 푸시를 하고왔다면 내역이 다를것이다.
  그렇다면 갱신이 필요한데 이때 필요한 명령어이다.

  - git pull origin master
    . origin은 주소이름이다. 만약내가 gitlab과 같은것을 써서 gitlab이라고 등록했다면 origin부분을 gitlab으로 바꿔주면 된다.
3.2 github에서 데이터 받아오기
  내가 집에서 시작해서 회사에서 이어서 하고싶다면 데이터를 받아와야한다.
  두번째 라면 위와같이 pull명령어를 이용해서 받아올 수 있지만
  처음이라면 clone을 이용해서 받아와야 한다.

  - git clone <주소>
    . 받고싶은 git repository 페이지에 가서 주소를 복사해 붙여넣으면(shift + Insert) 된다.

4. git에 잘못 추가했다면
4.1 add를 잘못했을때
  - git reset명령어를 이용하여 add 내역을 취소한다.
4.2 commit을 잘못했을때
  - 나중에 추가 예정
5. 기존 파일을 유지하며 기능을 추가할때
  - 기능을 추가하다보면 프로그램의 안정성이 저하될 수 있다.
  - 따라서 branch를 이용하여 기능을 개발하고 이상이 없을때 합칠 수 있다.

5.1 branch 생성하기
  - git branch <branch-name>
5.2 branch 끼리 이동하기
  - git checkout <branch-name>
5.3 branch 만들고 이동
  - git checkout -b <branch-name> origin main
5.4 branch 삭제
  - git branch -d <branch-name>
5.5 branch list보기
  - git branch
5.6 나눠진 branch 합칠때
  - git merge <branch-name>
     . 메인이 될 branch에서 진행해야 한다.

6. git log 보기
  - 추가 명령어의 경우 뒤에 쭉이어 붙일 수 있다.

6.1 기본 명령어
  - git log
6.2 간략하게 줄이기
  - git log --oneline
6.3 graph로 보여주기
  - git log  --
7. 기타
  - git의 명령어가 보고싶다면 git --help 명령어를 이용한다.


  !!!